<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Howarchou&#39;Blog</title>
  <icon>https://www.gravatar.com/avatar/34cbef5cc9799e24f2359a3a6a71a7a0</icon>
  <subtitle>blog website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zhougg.com/"/>
  <updated>2020-04-21T06:18:47.381Z</updated>
  <id>https://blog.zhougg.com/</id>
  
  <author>
    <name>Howar Chou</name>
    <email>howarchou@sina.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Eslint入门介绍</title>
    <link href="https://blog.zhougg.com/uncategorized/page-4/"/>
    <id>https://blog.zhougg.com/uncategorized/page-4/</id>
    <published>2020-04-21T03:01:55.000Z</published>
    <updated>2020-04-21T06:18:47.381Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Lint-的含义"><a href="#Lint-的含义" class="headerlink" title="Lint 的含义"></a>Lint 的含义</h4><ul><li>提供编码规范；</li><li>提供自动检验代码的程序，并打印检验结果：告诉你哪一个文件哪一行代码不符合哪一条编码规范，方便你去修改代码</li></ul><h4 id="Eslint-的含义"><a href="#Eslint-的含义" class="headerlink" title="Eslint 的含义"></a>Eslint 的含义</h4><p>Lint 是检验代码格式工具的一个统称，具体的工具有 Jslint 、 Eslint 等等 ………..</p><h4 id="使用-Eslint"><a href="#使用-Eslint" class="headerlink" title="使用 Eslint"></a>使用 Eslint</h4><p>创建项目并安装依赖包<br><code>npm init</code> 指令会在项目根目录下生成 package.json 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir lint_test</span><br><span class="line">cd lint_test</span><br><span class="line">npm install</span><br><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure><p>–save-dev 会把 eslint 安装到 package.json 文件中的 devDependencies 属性中，意思是只是开发阶段用到这个包，上线时就不需要这个包了。</p><h4 id="设置-package-json-文件"><a href="#设置-package-json-文件" class="headerlink" title="设置 package.json 文件"></a>设置 package.json 文件</h4><p>打开 package.json 文件，修改 script 属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;react-scripts test --env&#x3D;jsdom&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;eslint src&quot;,</span><br><span class="line">    &quot;lint:create&quot;: &quot;eslint --init&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>scripts 属性的意思是脚本，使用方法是在 cmd 窗口中输入 npm run 指令 的形式，如：<code>npm run lint:create</code>；</li><li>“lint:create”: “eslint –init” 这个脚本是为了生成 .eslintrc.js 文件;</li><li>“lint”: “eslint src”  Lint 自动检验 src 目录下所有的 .js 文件。</li></ul><h4 id="创建-eslint-js-文件"><a href="#创建-eslint-js-文件" class="headerlink" title="创建 .eslint.js 文件"></a>创建 .eslint.js 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint:create</span><br></pre></td></tr></table></figure><p>创建完成后根目录下应该会出现 .eslintrc.js 文件</p><h4 id="创建代码并校验代码"><a href="#创建代码并校验代码" class="headerlink" title="创建代码并校验代码"></a>创建代码并校验代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure><h4 id="设置-–fix-参数"><a href="#设置-–fix-参数" class="headerlink" title="设置 –fix 参数"></a>设置 –fix 参数</h4><p> “lint”: “eslint src –fix”, 加上 –fix 参数，是 Eslint 提供的自动修复基础错误的功能。</p><h4 id="配置文件讲解"><a href="#配置文件讲解" class="headerlink" title="配置文件讲解"></a>配置文件讲解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; .eslintrc.js </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;commonjs&quot;: true,</span><br><span class="line">        &quot;es6&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;extends&quot;: &quot;eslint:recommended&quot;,</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">            &quot;experimentalObjectRestSpread&quot;: true,</span><br><span class="line">            &quot;jsx&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sourceType&quot;: &quot;module&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;indent&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;tab&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;linebreak-style&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;windows&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;quotes&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;double&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;semi&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;always&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="environments-指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。"><a href="#environments-指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。" class="headerlink" title="environments - 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。"></a>environments - 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。</h5><h5 id="Globals-脚本在执行期间访问的额外的全局变量。"><a href="#Globals-脚本在执行期间访问的额外的全局变量。" class="headerlink" title="Globals - 脚本在执行期间访问的额外的全局变量。"></a>Globals - 脚本在执行期间访问的额外的全局变量。</h5><h5 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h5><p>ESLint 附带有大量的规则，修改规则应遵循如下要求：</p><ul><li>“off” 或 0 - 关闭规则</li><li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li><li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li></ul><h4 id="全局变量配置"><a href="#全局变量配置" class="headerlink" title="全局变量配置"></a>全局变量配置</h4><p>如使用 window 对象，默认情况下会报 no-undef 的错误，需要在 .eslintrc 中进行相应配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;globals&quot;: &#123;</span><br><span class="line">        &quot;window&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单行跳过-lint-校验"><a href="#单行跳过-lint-校验" class="headerlink" title="单行跳过 lint 校验"></a>单行跳过 lint 校验</h4><p>在实际编码时，可能会出现以下的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const apple &#x3D; &quot;apple&quot;;</span><br><span class="line">const balana &#x3D; &quot;balana&quot;;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    fruit: balana ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最上面定义了两个变量，在底部的配置文件中只可能用到其中一个变量，另一个用不到的在 eslint 校验时就会报错 no-unused-vars 的错误，意思是变量定义了但是没有被用到。</p><p>其中一种解决方案是在 .eslintrc 文件中配置 rules <code>no-unused-vars: 0</code>，意思是项目中不检验变量定义未使用这条规则。强烈不建议这样做，这个规则十分有用，可以规避编写代码时遗漏的变量。</p><p>另一种解决方案就是使用行内注释跳过对 apple 和 balana 两个变量跳过 eslint 校验，只影响这两个变量，不影响外部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const apple &#x3D; &quot;apple&quot;;  &#x2F;&#x2F; eslint-disable-line</span><br><span class="line">const balana &#x3D; &quot;balana&quot;;  &#x2F;&#x2F; eslint-disable-line</span><br><span class="line">  </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    fruit: balana ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时使用 eslint 校验时就不会再报错了。</p><h4 id="常见规则含义解释"><a href="#常见规则含义解释" class="headerlink" title="常见规则含义解释"></a>常见规则含义解释</h4><ul><li><p><code>object-shorthand</code> 设置该规则，表示对象属性要简写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var foo &#x3D; &#123;x: x&#125;;    &#x2F;&#x2F; 会报错</span><br><span class="line">var bar &#x3D; &#123;a: function () &#123;&#125;&#125;;  &#x2F;&#x2F; 会报错</span><br><span class="line">var foo &#x3D; &#123;x&#125;;    &#x2F;&#x2F; 不会报错</span><br><span class="line">var bar &#x3D; &#123;a () &#123;&#125;&#125;;    &#x2F;&#x2F; 不会报错</span><br></pre></td></tr></table></figure></li><li><p><code>prefer-arrow-callback</code> 要求回调函数使用箭头函数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 回调函数，函数的参数是个函数，这个参数函数就是回调函数</span><br><span class="line">funciton bar () &#123;&#125;   </span><br><span class="line">&#x2F;&#x2F; 不是回调函数，不会报错</span><br><span class="line">&#x2F;&#x2F; setTimeout 的第一个参数就是回调函数，不用箭头函数会报错</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; .......</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><ul><li><code>no-param-reassign</code> 禁止对函数的参数重新赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function bar (&#123; data &#x3D; &#123;&#125; &#125;) &#123;</span><br><span class="line">    data.num &#x3D; 12;      &#x2F;&#x2F; 会报错</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* </span><br><span class="line">虽然报错，又不想要将该校验关闭，如果代码中只有 data 这个属性有这种情形，</span><br><span class="line">可以在 .eslintrc.js 中的 rules 属性中添加配置（可忽略 data 属性做此校验）：</span><br><span class="line">&#39;no-param-reassign&#39;: [&#39;error&#39;, &#123; &#39;props&#39;: true, &#39;ignorePropertyModificationsFor&#39;: [&#39;data&#39;] &#125;],</span><br><span class="line">&#39;no-param-reassign&#39;: 0,  &#x2F;&#x2F; 关闭该属性校验</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><ul><li><p><code>no-trailing-spaces</code> 禁止行尾空格</p></li><li><p><code>no-shadow</code> 禁止变量声明与外层作用域的变量同名</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum (num) &#123;</span><br><span class="line">  let num &#x3D; 2;    &#x2F;&#x2F; 报错，因为 num 变量作为参数已经申明过了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用的几个规则"><a href="#常用的几个规则" class="headerlink" title="常用的几个规则"></a>常用的几个规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;quotes&quot;: [1, &quot;single&quot;],            # 单引号</span><br><span class="line">&quot;quote-props&quot;:[2, &quot;as-needed&quot;],     # 双引号自动变单引号</span><br><span class="line">&quot;semi&quot;: [2, &quot;never&quot;],               # 一行结尾不要写分号</span><br><span class="line">&quot;comma-dangle&quot;: [1,&quot;always-multiline&quot;]  # 对象或数组多行写法时，最后一个值加逗号</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Lint-的含义&quot;&gt;&lt;a href=&quot;#Lint-的含义&quot; class=&quot;headerlink&quot; title=&quot;Lint 的含义&quot;&gt;&lt;/a&gt;Lint 的含义&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;提供编码规范；&lt;/li&gt;
&lt;li&gt;提供自动检验代码的程序，并打印检验结果：告诉你
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>二进制</title>
    <link href="https://blog.zhougg.com/uncategorized/page-3/"/>
    <id>https://blog.zhougg.com/uncategorized/page-3/</id>
    <published>2020-04-17T01:50:47.000Z</published>
    <updated>2020-04-17T02:50:41.791Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>   bit(位)：数据存储的最小单元。在计算机二进制系统中，位，简记为b，也称为比特(bit)，每个二进制数字0或1就是一个位(bit)，其中每 8bit = 1 byte(字节)；</p><p>   Java中的int数据类型占4个byte(字节)，而1 byte(字节) = 8 bit(位)；（说白了，在二进制系统中是以bit 作为数据存储单元的）</p><h5 id="无符号数和有符号数"><a href="#无符号数和有符号数" class="headerlink" title="无符号数和有符号数"></a>无符号数和有符号数</h5><p> 在计算器中参与运算的数有两大类：无符号数和有符号数</p><pre><code>(1)有符号数： 对于有符号数而言，符号的正、负机器是无法识别的，但由于“正、负”恰好是两种截然不同的状态，如果用“0”表示“正”，用“1”表示“符”，这样符号也被数字化了， 并且规定将它放在有效数字的前面，即组成了有符号数。所以，在二进制中使用最高位（第一位）来表示符号，最高位是0，表示正数；最高位是1，表示负数。(2)无符号数： 无符号数是针对二进制来讲的，无符号数的表数范围是非负数。全部二进制均代表数值（所有位都用于表示数的大小），没有符号位。即第一个&quot;0&quot;或&quot;1&quot;不表示</code></pre><p> 例子：</p><pre><code>(1)在Java中int数据类型是怎么在计算机中表示的呢？ 假设 int  number = 1 ,那么number在计算机系统中将表示如下（32bit）： 00000000  00000000  00000000  00000001 同理可得，number=-1 时，在二进制中表示如下： 10000000  00000000  00000000  00000001 注意：最高位（第一位）是符号位，因为是number值为1是一个正数，所以最高位为0；(2)二进制转十进制？ 要从右到左用二进制的每个数去乘以2的相应次方（次方要从0开始算起）； 假如：二进制数1101转化成十进制 ，那么 1101 = 1*2^0+0*2^1+1*2^2+1*2^3 = 1+0+4+8 = 13； 注意：任何数的0次方都是1。</code></pre><h5 id="二进制中的原码、反码、补码"><a href="#二进制中的原码、反码、补码" class="headerlink" title="二进制中的原码、反码、补码"></a>二进制中的原码、反码、补码</h5><pre><code>在计算机内，定点数有3种表示法：原码、反码和补码原码：就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。反码：表示法规定：正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。补码：表示法规定：正数的补码与其原码相同；负数的补码是在其反码的末位加1。</code></pre><p>  对于有符号数而言：</p><pre><code>(1)二进制的最高位是符号位：0表示正数，1表示负数(2)正数的原码、反码、补码都一样；(3)负数的反码 =  它的原码符号位不变，其他位取反（0 -&gt;1 ; 1-&gt;0 ）；(4)负数的补码 = 它的反码 +1；(5)0的反码、补码都是0；(6)在计算机运算的时候，都是以补码的方式来运算的；</code></pre><h5 id="负数的二进制"><a href="#负数的二进制" class="headerlink" title="负数的二进制"></a>负数的二进制</h5><p>负数的原码 = （十进制的相反数），按位取反， 然后 + 1；<br>负数的反码 =  它的原码符号位不变，其他位取反（0 -&gt;1 ; 1-&gt;0 ）<br>负数的补码 = 它的反码 +1；</p><p>例如：-7的二进制等于7的二进制按位取反，然后+1</p><p>下面以8位为例：</p><p>第一步：</p><p>　　7的二进制：0000 0111</p><p>第二步：</p><p>　　7的二进制（取反）：1111 1000</p><p>第三步：</p><p>　　取反后加1：11111001</p><p>所以-7的二进制是：1111 1001</p><p>那么怎么求一个二进制负数的十进制数？把上面的步骤反过来就是了</p><p>一个负数：11111001</p><p>第一步：</p><p>　　减一：11111000</p><p>第二步：</p><p>　　按位取反：00000111</p><p>第三步：</p><p>　　计算然后取相反数：-(1<em>2^2 + 1</em>2^1 + 1*2^0) = -7</p><p>计算结果是-7，</p><p>那么这个二进制数的十进制就是：-7</p><h5 id="八进制、十六进制、十进制、二进制"><a href="#八进制、十六进制、十进制、二进制" class="headerlink" title="八进制、十六进制、十进制、二进制"></a>八进制、十六进制、十进制、二进制</h5><p>十进制负数转八进制、十六进制</p><p>负数转换成八进制、十六进制，只需在补码(二进制)的基础上，3位合成一位计算，或者4位合成一位计算</p><p>-3的转换成二进制为：</p><p>1111 1111 1111 1111 1111 1111 1111 1101</p><p>八进制则将-3的二进制从右至左每3位为一个单元，不够三位用0补 即：</p><p>011 111 111 111 111 111 111 111 111 111 101<br>计算每一个单元，结果为：37777777775</p><p>十六进制则将-3的二进制从右至左每4位合并为一个单元，即：</p><p>1111 1111 1111 1111 1111 1111 1111 1101<br>计算后为： FFFFFFFD</p><p>转换十进制-3为八进制和十六进制</p><p>十六进制（0，1，2，3，4，5，6，7，8，9，A，B，C，D，F）</p><h5 id="gt-gt-lt-lt-gt-gt-gt-移位运算"><a href="#gt-gt-lt-lt-gt-gt-gt-移位运算" class="headerlink" title="&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;移位运算"></a>&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;移位运算</h5><h6 id="1、-lt-lt"><a href="#1、-lt-lt" class="headerlink" title="1、&lt;&lt;"></a><strong>1、&lt;&lt;</strong></h6><p>有符号左移位，将运算数的二进制整体左移指定位数，低位用0补齐。</p><p>正数：5&lt;&lt;2</p><p>1、转化为二进制：</p><p>0000 0000 0000 0000 0000 0000 0000 0101</p><p>2、整体左移指2位数</p><p>0000 0000 0000 0000 0000 0000 0001 0100</p><p>3、转化为十进制</p><p>1<em>2^4+1</em>2^2=16+4=20</p><p>M&lt;&lt;N相当于M*2^n.</p><p>负数：-5&lt;&lt;2</p><p>1、转化为二进制：</p><p>1111 1111 1111 1111 1111 1111 1111 1011</p><p>2、整体左移指2位数</p><p>1111 1111 1111 1111 1111 1111 1110 1100</p><p>3、转化为十进制</p><p>-20</p><p>M&lt;&lt;N相当于M*2^n.</p><h6 id="2、-gt-gt"><a href="#2、-gt-gt" class="headerlink" title="2、&gt;&gt;"></a><strong>2、&gt;&gt;</strong></h6><p>&gt;&gt;有符号右移位，将运算数的二进制整体右移指定位数，正数高位用0补齐，负数高位用1补齐（保持负数符号不变）</p><p>正数：5&gt;&gt;2</p><p>1、转化为二进制：</p><p>0000 0000 0000 0000 0000 0000 0000 0101</p><p>2、整体右移指2位数</p><p>0000 0000 0000 0000 0000 0000 0000 0001</p><p>3、转化为十进制</p><p>1*2^0=1</p><p>M&gt;&gt;N相当于M/2^n 取商</p><p>负数：-5&gt;&gt;2</p><p>1、转化为二进制：</p><p>1111 1111 1111 1111 1111 1111 1111 1011</p><p>2、整体右移指2位数</p><p>1111 1111 1111 1111 1111 1111 1111 1110</p><p>3、转化为十进制</p><p>-2</p><p>M&lt;&lt;N相当于如果运算数是偶数，那么那么它的运算结果就是 x = -(|x| / 2)，如果运算数是奇数，那么它的运算结果就是 x = -(|x| / 2) - 1</p><h6 id="3、-gt-gt-gt"><a href="#3、-gt-gt-gt" class="headerlink" title="3、&gt;&gt;&gt;"></a><strong>3、&gt;&gt;&gt;</strong></h6><p>&gt;&gt;&gt;无符号右移位，不管正数还是负数，高位都用0补齐（忽略符号位）</p><p>1、正数的&gt;&gt;&gt;无符号右移位和&gt;&gt;有符号右移位计算结果相同</p><p>2、负数</p><p>-5&gt;&gt;&gt;2</p><p>1、转化为二进制：</p><p>1111 1111 1111 1111 1111 1111 1111 1011</p><p>2、整体右移指2位数</p><p>0011 1111 1111 1111 1111 1111 1111 1110</p><p>3、转化为十进制</p><p>1073741822</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h5&gt;&lt;p&gt;   bit(位)：数据存储的最小单元。在计算机二进制系统中，位，简记为b，也称为比特(bit)，每个二进制数字0或1就是一个位(b
      
    
    </summary>
    
    
    
      <category term="二进制" scheme="https://blog.zhougg.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>闭包经典题目</title>
    <link href="https://blog.zhougg.com/uncategorized/page-2/"/>
    <id>https://blog.zhougg.com/uncategorized/page-2/</id>
    <published>2020-04-16T06:48:41.000Z</published>
    <updated>2020-04-16T07:40:16.297Z</updated>
    
    <content type="html"><![CDATA[<p>记录一道关于闭包的经典题目。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fun(m,n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>);  a.fun(<span class="number">1</span>);  a.fun(<span class="number">2</span>);  a.fun(<span class="number">3</span>);    <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);                <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>);  c.fun(<span class="number">2</span>);  c.fun(<span class="number">3</span>);        <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="comment">//问:三行a,b,c的输出分别是什么？</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一道关于闭包的经典题目。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://blog.zhougg.com/tags/js/"/>
    
      <category term="前端" scheme="https://blog.zhougg.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一道常被人轻视的前端JS面试题</title>
    <link href="https://blog.zhougg.com/uncategorized/page-1/"/>
    <id>https://blog.zhougg.com/uncategorized/page-1/</id>
    <published>2020-04-16T02:16:08.000Z</published>
    <updated>2020-04-16T03:59:43.423Z</updated>
    
    <content type="html"><![CDATA[<p>最近在网上看到一道javascript的面试题，很有意思：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">2</span>);&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure><hr><p>这里是分割线</p><hr><p>此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。<br>此题包含7小问，分别说下。</p><h4 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h4><p>先看此题的上半部分做了什么，首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫getName的匿名函数。之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。</p><p>第一问的 <code>Foo.getName</code> 自然是访问Foo函数上存储的静态属性，结果自然是<code>2</code>。</p><h4 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h4><p>第二问直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。此处有两个坑，一是<strong>变量声明提升</strong>，二是<strong>函数表达式</strong>。</p><p><strong>变量声明提升</strong></p><p>即所有声明变量或声明函数都会被提升到当前函数的顶部。<br>例如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>代码执行阶段，js引擎会将声明语句提升至当前执行块的最前方，变为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>函数表达式</strong></p><p><code>var getName</code> 与 <code>function getName</code> 都是声明语句，区别在于 <code>var getName</code> 是函数表达式，而<code>function getName</code> 是函数声明。</p><p>函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行。</p><p>例如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(x);&#x2F;&#x2F;输出：function x()&#123;&#125;</span><br><span class="line">var x &#x3D; 1;</span><br><span class="line">function x()&#123;&#125;</span><br></pre></td></tr></table></figure><p>实际上执行代码的过程:先将 <code>var x=1</code> 拆分为 <code>var x;</code> 和 <code>x = 1;</code> 两行，再将 <code>var x;</code> 和 <code>function x(){}</code> 两行提升至最上方变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x;</span><br><span class="line">function x()&#123;&#125;</span><br><span class="line">console.log(x);</span><br><span class="line">x &#x3D; 1;</span><br></pre></td></tr></table></figure><p>所以最终函数声明的x覆盖了变量声明的x，console.log输出为x函数。<br>同理，原题中代码最终执行时的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var getName； &#x2F;&#x2F;getName变量提升</span><br><span class="line">function Foo() &#123;</span><br><span class="line">    getName &#x3D; function () &#123; alert (1); &#125;;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">function getName() &#123; alert (5);&#125;  &#x2F;&#x2F;提升函数声明，覆盖var的声明</span><br><span class="line">Foo.getName &#x3D; function () &#123; alert (2);&#125;;</span><br><span class="line">Foo.prototype.getName &#x3D; function () &#123; alert (3);&#125;;</span><br><span class="line">getName &#x3D; function () &#123; alert (4);&#125;; &#x2F;&#x2F;最终的赋值再次覆盖function getName声明</span><br><span class="line">getName();&#x2F;&#x2F;最终输出4</span><br></pre></td></tr></table></figure><h4 id="第三问"><a href="#第三问" class="headerlink" title="第三问"></a>第三问</h4><p>第三问的 <code>Foo().getName();</code> 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。</p><p>Foo函数的第一句  <code>getName = function () { alert (1); };</code> 是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 <code>function(){alert(1)}</code> 。<br>此处实际上是将外层作用域内的getName函数修改了。</p><blockquote><p>注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。</p></blockquote><p>之后Foo函数的返回值是this, 此时<strong>this的指向是由所在函数的调用方式决定的</strong>。而此处的直接调用方式，this指向window对象。</p><p>于是Foo函数返回的是window对象，相当于执行 window.getName() ，而window中的getName已经被修改为alert(1)，所以最终会输出1</p><p>此处考察了两个知识点，一个是变量作用域问题，一个是this指向问题。</p><h4 id="第四问"><a href="#第四问" class="headerlink" title="第四问"></a>第四问</h4><p>此处直接调用getName函数，相当于 window.getName() ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1</p><h4 id="第五问"><a href="#第五问" class="headerlink" title="第五问"></a>第五问</h4><p>第五问 <code>new Foo.getName();</code> ,考察的是js的运算符优先级问题。<br>js运算符优先级:<br><img src="/images/article/1.png" width="90%"><br>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p><p>通过查上表可以得知点（.）的优先级19高于new操作，遂相当于是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new (Foo.getName)();</span><br></pre></td></tr></table></figure><p>所以实际上将getName函数作为了构造函数来执行，弹出2。</p><h4 id="第六问"><a href="#第六问" class="headerlink" title="第六问"></a>第六问</h4><p>第六问 <code>new Foo().getName()</code> ，首先看运算符优先级括号高于new，实际执行为<br><code>(new Foo()).getName()</code></p><p>遂先执行Foo函数，而Foo此时作为构造函数却有返回值，所以这里需要说明下js中的构造函数返回值问题。</p><p><strong>构造函数的返回值</strong></p><p>在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。</p><p>而在js中构造函数可以有返回值也可以没有。</p><ol><li><p>没有返回值则按照其他语言一样返回实例化对象。</p></li><li><p>若有返回值则检查其返回值是否为引用类型。如果是非引用类型，如基本类型（string,number,boolean,null,undefined, sybmol）则与无返回值相同，实际返回其实例化对象。</p></li><li><p>若返回值是引用类型，则实际返回值为这个引用类型。</p></li></ol><p>原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，最终Foo函数返回实例化对象。</p><p>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（[[prototype]]）中寻找getName，找到了， 最终输出3。</p><h5 id="第七问"><a href="#第七问" class="headerlink" title="第七问"></a>第七问</h5><p>第七问, <code>new new Foo().getName();</code>同样是运算符优先级问题。<br>最终实际执行为：<br>new (new Foo().getName)()</p><p>先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。<br>遂最终结果为3。</p><p>–End–</p><p>此文转载于：<a href="http://www.cnblogs.com/xxcanghai/" target="_blank" rel="noopener">http://www.cnblogs.com/xxcanghai/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在网上看到一道javascript的面试题，很有意思：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://blog.zhougg.com/tags/js/"/>
    
      <category term="前端" scheme="https://blog.zhougg.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://blog.zhougg.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo安装过程</title>
    <link href="https://blog.zhougg.com/hexo/page/"/>
    <id>https://blog.zhougg.com/hexo/page/</id>
    <published>2020-04-15T02:21:03.000Z</published>
    <updated>2020-04-16T01:28:58.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、GitHub创建个人仓库"><a href="#1、GitHub创建个人仓库" class="headerlink" title="1、GitHub创建个人仓库"></a>1、GitHub创建个人仓库</h3><p>注册github账号，登录后，Create a new repository，输入repository name， 完整的仓库名格式：[user-name]/[repository-name].github.io 格式，user-name为github的账号名，repository-name为仓库名。</p><h3 id="2、全局安装hexo"><a href="#2、全局安装hexo" class="headerlink" title="2、全局安装hexo"></a>2、全局安装hexo</h3><p>打开cmd，输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="3、创建项目名myblog，并初始化项目"><a href="#3、创建项目名myblog，并初始化项目" class="headerlink" title="3、创建项目名myblog，并初始化项目"></a>3、创建项目名myblog，并初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 本地运行</span><br><span class="line">cd myblog</span><br><span class="line">hexo init</span><br><span class="line">npm install </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="4、部署到github"><a href="#4、部署到github" class="headerlink" title="4、部署到github"></a>4、部署到github</h3><p>修改根目录下面的_config.yml文件，找到deploy字段，并填写完整，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;howarchou&#x2F;howarchou.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>尤其注意字段后面的空格。然后执行如下命令，即可发布到github。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>注意 deploy时可能要你输入github的username和password。</p><h3 id="5、查看效果"><a href="#5、查看效果" class="headerlink" title="5、查看效果"></a>5、查看效果</h3><p>浏览器访问：<a href="https://howarchou.github.io" target="_blank" rel="noopener">https://howarchou.github.io</a> 即可看到效果。</p><h3 id="6、个性化域名"><a href="#6、个性化域名" class="headerlink" title="6、个性化域名"></a>6、个性化域名</h3><p>1、在项目文件夹下的source目录，新建一个CNAME文件，没有后缀，里面仅一行代码，写上域名， 然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>2、去万网购买一个域名并认证，进入dns解析控制台，我用的<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">dnspod</a>，新建两条A记录，分别指向185.199.108.153和185.199.109.153；再增加一条CNAME记录，主机记录名为blog，指向刚才浏览器访问的网址：<em>howarchou.github.io.</em><br>注意后面有个点，过几分钟dns解析生效后就可以看效果了。比如我的域名是zhougg.com， 访问地址是：blog.zhougg.com 。<br>至此，搭建的个性博客就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、GitHub创建个人仓库&quot;&gt;&lt;a href=&quot;#1、GitHub创建个人仓库&quot; class=&quot;headerlink&quot; title=&quot;1、GitHub创建个人仓库&quot;&gt;&lt;/a&gt;1、GitHub创建个人仓库&lt;/h3&gt;&lt;p&gt;注册github账号，登录后，Create 
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.zhougg.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.zhougg.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://blog.zhougg.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.zhougg.com/uncategorized/hello-world/"/>
    <id>https://blog.zhougg.com/uncategorized/hello-world/</id>
    <published>2020-04-15T02:21:03.000Z</published>
    <updated>2020-04-15T07:34:40.281Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://blog.zhougg.com/tags/hexo/"/>
    
      <category term="blog" scheme="https://blog.zhougg.com/tags/blog/"/>
    
  </entry>
  
</feed>
