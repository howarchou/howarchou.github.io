<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>闭包经典题目</title>
    <url>/uncategorized/page-2/</url>
    <content><![CDATA[<p>记录一道关于闭包的经典题目。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fun(m,n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>);  a.fun(<span class="number">1</span>);  a.fun(<span class="number">2</span>);  a.fun(<span class="number">3</span>);    <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);                <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>);  c.fun(<span class="number">2</span>);  c.fun(<span class="number">3</span>);        <span class="comment">//undefined,?,?,?</span></span><br><span class="line"><span class="comment">//问:三行a,b,c的输出分别是什么？</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>js</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>一道常被人轻视的前端JS面试题</title>
    <url>/uncategorized/page-1/</url>
    <content><![CDATA[<p>最近在网上看到一道javascript的面试题，很有意思：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">1</span>); &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">2</span>);&#125;;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; alert (<span class="number">5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>

<hr>
<p>这里是分割线</p>
<hr>
<p>此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。<br>此题包含7小问，分别说下。</p>
<h4 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h4><p>先看此题的上半部分做了什么，首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫getName的匿名函数。之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。</p>
<p>第一问的 <code>Foo.getName</code> 自然是访问Foo函数上存储的静态属性，结果自然是<code>2</code>。</p>
<h4 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h4><p>第二问直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫getName的函数，所以跟1 2 3都没什么关系。此处有两个坑，一是<strong>变量声明提升</strong>，二是<strong>函数表达式</strong>。</p>
<p><strong>变量声明提升</strong></p>
<p>即所有声明变量或声明函数都会被提升到当前函数的顶部。<br>例如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>代码执行阶段，js引擎会将声明语句提升至当前执行块的最前方，变为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p><strong>函数表达式</strong></p>
<p><code>var getName</code> 与 <code>function getName</code> 都是声明语句，区别在于 <code>var getName</code> 是函数表达式，而<code>function getName</code> 是函数声明。</p>
<p>函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行。</p>
<p>例如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(x);&#x2F;&#x2F;输出：function x()&#123;&#125;</span><br><span class="line">var x &#x3D; 1;</span><br><span class="line">function x()&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>实际上执行代码的过程:先将 <code>var x=1</code> 拆分为 <code>var x;</code> 和 <code>x = 1;</code> 两行，再将 <code>var x;</code> 和 <code>function x(){}</code> 两行提升至最上方变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var x;</span><br><span class="line">function x()&#123;&#125;</span><br><span class="line">console.log(x);</span><br><span class="line">x &#x3D; 1;</span><br></pre></td></tr></table></figure>
<p>所以最终函数声明的x覆盖了变量声明的x，console.log输出为x函数。<br>同理，原题中代码最终执行时的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var getName； &#x2F;&#x2F;getName变量提升</span><br><span class="line">function Foo() &#123;</span><br><span class="line">    getName &#x3D; function () &#123; alert (1); &#125;;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">function getName() &#123; alert (5);&#125;  &#x2F;&#x2F;提升函数声明，覆盖var的声明</span><br><span class="line">Foo.getName &#x3D; function () &#123; alert (2);&#125;;</span><br><span class="line">Foo.prototype.getName &#x3D; function () &#123; alert (3);&#125;;</span><br><span class="line">getName &#x3D; function () &#123; alert (4);&#125;; &#x2F;&#x2F;最终的赋值再次覆盖function getName声明</span><br><span class="line">getName();&#x2F;&#x2F;最终输出4</span><br></pre></td></tr></table></figure>

<h4 id="第三问"><a href="#第三问" class="headerlink" title="第三问"></a>第三问</h4><p>第三问的 <code>Foo().getName();</code> 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。</p>
<p>Foo函数的第一句  <code>getName = function () { alert (1); };</code> 是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 <code>function(){alert(1)}</code> 。<br>此处实际上是将外层作用域内的getName函数修改了。</p>
<blockquote>
<p>注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。</p>
</blockquote>
<p>之后Foo函数的返回值是this, 此时<strong>this的指向是由所在函数的调用方式决定的</strong>。而此处的直接调用方式，this指向window对象。</p>
<p>于是Foo函数返回的是window对象，相当于执行 window.getName() ，而window中的getName已经被修改为alert(1)，所以最终会输出1</p>
<p>此处考察了两个知识点，一个是变量作用域问题，一个是this指向问题。</p>
<h4 id="第四问"><a href="#第四问" class="headerlink" title="第四问"></a>第四问</h4><p>此处直接调用getName函数，相当于 window.getName() ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1</p>
<h4 id="第五问"><a href="#第五问" class="headerlink" title="第五问"></a>第五问</h4><p>第五问 <code>new Foo.getName();</code> ,考察的是js的运算符优先级问题。<br>js运算符优先级:<br><img src="/images/article/1.png" width="90%"><br>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p>
<p>通过查上表可以得知点（.）的优先级19高于new操作，遂相当于是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new (Foo.getName)();</span><br></pre></td></tr></table></figure>
<p>所以实际上将getName函数作为了构造函数来执行，弹出2。</p>
<h4 id="第六问"><a href="#第六问" class="headerlink" title="第六问"></a>第六问</h4><p>第六问 <code>new Foo().getName()</code> ，首先看运算符优先级括号高于new，实际执行为<br><code>(new Foo()).getName()</code></p>
<p>遂先执行Foo函数，而Foo此时作为构造函数却有返回值，所以这里需要说明下js中的构造函数返回值问题。</p>
<p><strong>构造函数的返回值</strong></p>
<p>在传统语言中，构造函数不应该有返回值，实际执行的返回值就是此构造函数的实例化对象。</p>
<p>而在js中构造函数可以有返回值也可以没有。</p>
<ol>
<li><p>没有返回值则按照其他语言一样返回实例化对象。</p>
</li>
<li><p>若有返回值则检查其返回值是否为引用类型。如果是非引用类型，如基本类型（string,number,boolean,null,undefined, sybmol）则与无返回值相同，实际返回其实例化对象。</p>
</li>
<li><p>若返回值是引用类型，则实际返回值为这个引用类型。</p>
</li>
</ol>
<p>原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，最终Foo函数返回实例化对象。</p>
<p>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（[[prototype]]）中寻找getName，找到了， 最终输出3。</p>
<h5 id="第七问"><a href="#第七问" class="headerlink" title="第七问"></a>第七问</h5><p>第七问, <code>new new Foo().getName();</code>同样是运算符优先级问题。<br>最终实际执行为：<br>new (new Foo().getName)()</p>
<p>先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。<br>遂最终结果为3。</p>
<p>–End–</p>
<p>此文转载于：<a href="http://www.cnblogs.com/xxcanghai/" target="_blank" rel="noopener">http://www.cnblogs.com/xxcanghai/</a></p>
]]></content>
      <tags>
        <tag>js</tag>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo安装过程</title>
    <url>/hexo/page/</url>
    <content><![CDATA[<h3 id="1、GitHub创建个人仓库"><a href="#1、GitHub创建个人仓库" class="headerlink" title="1、GitHub创建个人仓库"></a>1、GitHub创建个人仓库</h3><p>注册github账号，登录后，Create a new repository，输入repository name， 完整的仓库名格式：[user-name]/[repository-name].github.io 格式，user-name为github的账号名，repository-name为仓库名。</p>
<h3 id="2、全局安装hexo"><a href="#2、全局安装hexo" class="headerlink" title="2、全局安装hexo"></a>2、全局安装hexo</h3><p>打开cmd，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="3、创建项目名myblog，并初始化项目"><a href="#3、创建项目名myblog，并初始化项目" class="headerlink" title="3、创建项目名myblog，并初始化项目"></a>3、创建项目名myblog，并初始化项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 本地运行</span><br><span class="line">cd myblog</span><br><span class="line">hexo init</span><br><span class="line">npm install </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="4、部署到github"><a href="#4、部署到github" class="headerlink" title="4、部署到github"></a>4、部署到github</h3><p>修改根目录下面的_config.yml文件，找到deploy字段，并填写完整，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;howarchou&#x2F;howarchou.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>尤其注意字段后面的空格。然后执行如下命令，即可发布到github。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>注意 deploy时可能要你输入github的username和password。</p>
<h3 id="5、查看效果"><a href="#5、查看效果" class="headerlink" title="5、查看效果"></a>5、查看效果</h3><p>浏览器访问：<a href="https://howarchou.github.io" target="_blank" rel="noopener">https://howarchou.github.io</a> 即可看到效果。</p>
<h3 id="6、个性化域名"><a href="#6、个性化域名" class="headerlink" title="6、个性化域名"></a>6、个性化域名</h3><p>1、在项目文件夹下的source目录，新建一个CNAME文件，没有后缀，里面仅一行代码，写上域名， 然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>2、去万网购买一个域名并认证，进入dns解析控制台，我用的<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">dnspod</a>，新建两条A记录，分别指向185.199.108.153和185.199.109.153；再增加一条CNAME记录，主机记录名为blog，指向刚才浏览器访问的网址：<em>howarchou.github.io.</em><br>注意后面有个点，过几分钟dns解析生效后就可以看效果了。比如我的域名是zhougg.com， 访问地址是：blog.zhougg.com 。<br>至此，搭建的个性博客就完成了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
